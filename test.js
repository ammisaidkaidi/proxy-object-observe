const assert = require('assert');
const observe = require('./');

let changes = [];
const example = observe({ foo: 1 }, (change) => changes.push(change)).object;
example.foo = 2;
example.bar = 1;
Object.defineProperty(example, 'baz', { value: 3, configurable: true });
Object.defineProperty(example, 'baz', { value: 4 });
delete example.foo;
assert.equal(changes.length, 5);
assert.equal(changes[0].object, example);
assert.equal(changes[0].type, 'update');
assert.equal(changes[0].name, 'foo');
assert.equal(changes[0].oldValue, 1);
assert.equal(changes[1].object, example);
assert.equal(changes[1].type, 'add');
assert.equal(changes[1].name, 'bar');
assert.equal(changes[2].object, example);
assert.equal(changes[2].type, 'add');
assert.equal(changes[2].name, 'baz');
assert.equal(changes[3].object, example);
assert.equal(changes[3].type, 'reconfigure');
assert.equal(changes[3].name, 'baz');
assert.equal(changes[3].oldValue.value, 3);
assert.equal(changes[3].oldValue.configurable, true);
assert.equal(changes[4].object, example);
assert.equal(changes[4].type, 'delete');
assert.equal(changes[4].name, 'foo');
assert.equal(changes[4].oldValue, 2);

changes = [];
const example2 = observe({ id: 1 }, (change) => changes.push(change)).object;
example2.a = 'b';
example2.id++;
Object.defineProperty(example2, 'a', { enumerable: false });
delete example2.a;
Object.preventExtensions(example2);
assert.equal(changes.length, 5);
assert.equal(changes[0].object, example2);
assert.equal(changes[0].type, 'add');
assert.equal(changes[0].name, 'a');
assert.equal(changes[1].object, example2);
assert.equal(changes[1].type, 'update');
assert.equal(changes[1].name, 'id');
assert.equal(changes[1].oldValue, 1);
assert.equal(changes[2].object, example2);
assert.equal(changes[2].type, 'reconfigure');
assert.equal(changes[2].oldValue.enumerable, true);
assert.equal(changes[3].object, example2);
assert.equal(changes[3].type, 'delete');
assert.equal(changes[3].name, 'a');
assert.equal(changes[4].object, example2);
assert.equal(changes[4].type, 'preventExtensions');

changes = [];
const { object: example3, unobserve } = observe({ id: 1 }, (change) => changes.push(change));
example3.a = 'b';
example3.a = 'c';
unobserve();
example3.a = 'd';
example3.a = 'e';
assert.equal(changes.length, 2);
assert.equal(changes[0].object, example3);
assert.equal(changes[0].type, 'add');
assert.equal(changes[0].name, 'a');
assert.equal(changes[1].object, example3);
assert.equal(changes[1].type, 'update');
assert.equal(changes[1].name, 'a');
assert.equal(changes[1].oldValue, 'b');
assert.equal(example3.a, 'e');

console.log('All Pass :)');
